{"version":3,"sources":["ShoppingLocalStorage.js","App.js","serviceWorker.js","index.js"],"names":["ShoppingList","props","state","newItemName","groceryItems","name","id","completed","validationErrors","submitted","handleOnChange","bind","handleCompletedToggle","handleDelete","handleOnSubmit","validateFields","prevProps","prevState","prevStateString","JSON","stringify","updatedStateString","this","console","log","localStorage","setItem","savedStateFromLocalStorage","getItem","setState","parse","e","target","value","itemindexValue","attributes","itemindex","index","parseInt","newGroceryItemsState","checked","splice","preventDefault","newGroceryItemObject","Date","now","errors","Object","keys","length","newItemNameError","map","item","key","type","onChange","onClick","onSubmit","className","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c0759b4b.chunk.js","sourcesContent":["import './ShoppingList.css';\r\nimport React, { Component } from 'react';\r\n\r\nclass ShoppingList extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      newItemName: '',\r\n      groceryItems: [\r\n        { name: 'Oil', id: 'item-1', completed: false },\r\n        { name: 'Apples', id: 'item-2', completed: true },\r\n        { name: 'Rice', id: 'item-3', completed: false }\r\n      ],\r\n      validationErrors: {},\r\n      submitted: 0\r\n    }\r\n\r\n    this.handleOnChange = this.handleOnChange.bind(this)\r\n    this.handleCompletedToggle = this.handleCompletedToggle.bind(this)\r\n    this.handleDelete = this.handleDelete.bind(this)\r\n    this.handleOnSubmit = this.handleOnSubmit.bind(this)\r\n    this.validateFields = this.validateFields.bind(this)\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const prevStateString = JSON.stringify(prevState.groceryItems)\r\n    const updatedStateString = JSON.stringify(this.state.groceryItems)\r\n\r\n    if (prevStateString !== updatedStateString) {\r\n      console.log(\"Save this:\", updatedStateString)\r\n      localStorage.setItem('groceryItems', updatedStateString)\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const savedStateFromLocalStorage = localStorage.getItem('groceryItems')\r\n\r\n    if (savedStateFromLocalStorage) {\r\n      this.setState({\r\n        groceryItems: JSON.parse(savedStateFromLocalStorage)\r\n      })\r\n    }\r\n  }\r\n\r\n  handleOnChange(e)\r\n   {\r\n    const target = e.target\r\n    const name = target.name\r\n    const value = target.value\r\n\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  handleCompletedToggle(e) {\r\n    const target = e.target\r\n    const itemindexValue = target.attributes.itemindex.value\r\n    const index = parseInt(itemindexValue, 10) // access input's custom attribute\r\n    \r\n    console.log('toggling: ' + index)\r\n\r\n    const newGroceryItemsState = [...this.state.groceryItems]\r\n    newGroceryItemsState[index] = {\r\n      ...newGroceryItemsState[index],\r\n      completed: target.checked\r\n    }\r\n\r\n    this.setState({\r\n      groceryItems: newGroceryItemsState\r\n    })\r\n  }\r\n\r\n  handleDelete(e) {\r\n    const target = e.target\r\n    const itemindexValue = target.attributes.itemindex.value\r\n    const index = parseInt(itemindexValue, 10) // access button's custom attribute\r\n\r\n    //console.log('deleting: ' + index)\r\n\r\n    const newGroceryItemsState = [...this.state.groceryItems]\r\n    newGroceryItemsState.splice(index, 1)\r\n\r\n    this.setState({\r\n      groceryItems: newGroceryItemsState\r\n    })\r\n  }\r\n\r\n  handleOnSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    const isFormValid = this.validateFields()\r\n\r\n    if (isFormValid) {\r\n      const newGroceryItemObject = {\r\n        completed: false,\r\n        name: this.state.newItemName,\r\n        id: 'item-' + Date.now()\r\n      }\r\n      this.setState((state) => {\r\n        return {\r\n          submitted: state.submitted + 1,\r\n          groceryItems: [...state.groceryItems, newGroceryItemObject],\r\n          newItemName: ''\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  validateFields() {\r\n    const {\r\n      newItemName\r\n    } = this.state\r\n\r\n    const errors = {}\r\n\r\n    if (!newItemName) {\r\n      errors['newItemName'] = 'Please enter new item name'\r\n    }\r\n\r\n    this.setState({\r\n      validationErrors: errors\r\n    })\r\n\r\n    return Object.keys(errors).length === 0\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      newItemName: newItemNameError,\r\n    } = this.state.validationErrors\r\n\r\n    const {\r\n      groceryItems\r\n    } = this.state\r\n\r\n    return (\r\n      <>\r\n      <section>\r\n        <h3>Simple Shoping List</h3>\r\n        { !groceryItems.length && <p>No items!</p> }\r\n        <ul>\r\n          {\r\n            groceryItems.map((item, index) => {\r\n              return (\r\n                <li key={item.id}>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={item.completed}\r\n                    onChange={this.handleCompletedToggle}\r\n                    itemindex={index} // lowercase 'itemindex' as per React docs\r\n                  />\r\n                  <span>{item.name}</span>\r\n                  <button\r\n                    itemindex={index}\r\n                    onClick={this.handleDelete}\r\n                  >\r\n                   Delete\r\n                  </button>\r\n                </li>\r\n              )\r\n            })\r\n          }\r\n        </ul>\r\n        <form onSubmit={this.handleOnSubmit}>\r\n          <label>\r\n            <span className=\"error\">{newItemNameError}</span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"newItemName\"\r\n              placeholder=\"Activities\"\r\n              value={this.state.newItemName}\r\n              onChange={this.handleOnChange}\r\n            />\r\n          </label>\r\n\r\n          <button type=\"submit\">Submit</button>\r\n\r\n          <p>Submitted {this.state.submitted} times!</p>\r\n        </form>\r\n      </section>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ShoppingList;","import React from 'react';\nimport ShoppingList  from './ShoppingLocalStorage'\nfunction App() {\n  return (\n    <div>\n      \n      <ShoppingList />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}